{"version":3,"file":"components-atoms-Button-stories.00bbc785.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyJA","sources":["webpack://lg-prototype/./src/components/atoms/Button.tsx"],"sourcesContent":["import React from 'react';\nimport { Button as AntButton } from 'antd';\nimport { ButtonProps as AntButtonProps } from 'antd/lib/button';\nimport styled from 'styled-components';\n\n// Custom styled button to match mobile-first design\nconst StyledButton = styled(AntButton)`\n  // Primary button - blue background, white text\n  &.ant-btn-primary {\n    background-color: #1890ff;\n    border-color: #1890ff;\n    color: white;\n    font-weight: 500;\n    \n    &:hover, &:focus {\n      background-color: #40a9ff;\n      border-color: #40a9ff;\n    }\n  }\n  \n  // Secondary button - white background with blue border\n  &.ant-btn-default {\n    background-color: white;\n    border-color: #1890ff;\n    color: #1890ff;\n    \n    &:hover, &:focus {\n      border-color: #40a9ff;\n      color: #40a9ff;\n    }\n  }\n  \n  // Text button - no background or border\n  &.ant-btn-text {\n    color: #1890ff;\n    \n    &:hover, &:focus {\n      color: #40a9ff;\n      background-color: rgba(24, 144, 255, 0.1);\n    }\n  }\n  \n  // Danger button - red styling\n  &.ant-btn-dangerous {\n    background-color: #ff4d4f;\n    border-color: #ff4d4f;\n    color: white;\n    \n    &:hover, &:focus {\n      background-color: #ff7875;\n      border-color: #ff7875;\n    }\n  }\n  \n  // For disabled state\n  &.ant-btn-disabled,\n  &.ant-btn-disabled:hover,\n  &.ant-btn-disabled:focus,\n  &.ant-btn-disabled:active {\n    background-color: #f5f5f5;\n    border-color: #d9d9d9;\n    color: rgba(0, 0, 0, 0.25);\n  }\n  \n  // Shared styles for all buttons - updated for mobile-first design\n  border-radius: 4px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  \n  // Updated size variants for mobile\n  &.ant-btn-lg {\n    font-size: 16px;\n    height: 44px;\n    padding: 8px 16px;\n    border-radius: 6px;\n  }\n  \n  &.ant-btn-sm {\n    font-size: 12px;\n    height: 28px;\n    padding: 4px 12px;\n  }\n  \n  // Default size adjusted for mobile\n  &.ant-btn {\n    font-size: 14px;\n    height: 36px;\n    padding: 6px 16px;\n  }\n  \n  // Full-width button for mobile interfaces\n  &.mobile-full-width {\n    width: 100%;\n    border-radius: 4px;\n  }\n  \n  // Bottom fixed button often used in mobile apps\n  &.bottom-fixed {\n    position: fixed;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    border-radius: 0;\n    z-index: 100;\n    height: 48px;\n  }\n`;\n\n// Extend the Ant Design ButtonProps but omit the variant property to avoid conflicts\nexport interface ButtonProps extends Omit<AntButtonProps, 'variant'> {\n  label?: React.ReactNode;\n  buttonVariant?: 'primary' | 'secondary' | 'text' | 'danger';\n  fullWidthMobile?: boolean;\n  bottomFixed?: boolean;\n}\n\nconst Button: React.FC<ButtonProps> = ({ \n  label, \n  children, \n  buttonVariant = 'default',\n  type,\n  danger,\n  fullWidthMobile = false,\n  bottomFixed = false,\n  className = '',\n  ...props \n}) => {\n  // Map buttonVariant to ant design type\n  let buttonType = type;\n  let buttonDanger = danger;\n  \n  if (!buttonType) {\n    switch(buttonVariant) {\n      case 'primary':\n        buttonType = 'primary';\n        break;\n      case 'secondary':\n        buttonType = 'default';\n        break;\n      case 'text':\n        buttonType = 'text';\n        break;\n      case 'danger':\n        buttonType = 'primary';\n        buttonDanger = true;\n        break;\n      default:\n        buttonType = 'default';\n    }\n  }\n\n  // Build className string with conditional mobile classes\n  const combinedClassName = [\n    className,\n    fullWidthMobile ? 'mobile-full-width' : '',\n    bottomFixed ? 'bottom-fixed' : ''\n  ].filter(Boolean).join(' ');\n\n  return (\n    <StyledButton \n      type={buttonType} \n      danger={buttonDanger}\n      className={combinedClassName}\n      {...props}\n    >\n      {label || children}\n    </StyledButton>\n  );\n};\n\nexport default Button;\n"],"names":[],"sourceRoot":""}