{"version":3,"file":"components-organisms-ContainerForm-stories.a62ccd99.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyJA;;AC1IA;AACA;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;;;;AAMA;;;;AAMA;;;;AC1DA;;;;;AAOA;;;;;;;;;;AAYA;;;;;;;AClBA;;AAIA;AACA","sources":["webpack://lg-prototype/./src/components/atoms/Button.tsx","webpack://lg-prototype/./src/components/atoms/Input.tsx","webpack://lg-prototype/./src/components/organisms/ContainerForm.tsx","webpack://lg-prototype/./src/components/atoms/LanguageSwitcher.tsx"],"sourcesContent":["import React from 'react';\nimport { Button as AntButton } from 'antd';\nimport { ButtonProps as AntButtonProps } from 'antd/lib/button';\nimport styled from 'styled-components';\n\n// Custom styled button to match mobile-first design\nconst StyledButton = styled(AntButton)`\n  // Primary button - blue background, white text\n  &.ant-btn-primary {\n    background-color: #1890ff;\n    border-color: #1890ff;\n    color: white;\n    font-weight: 500;\n    \n    &:hover, &:focus {\n      background-color: #40a9ff;\n      border-color: #40a9ff;\n    }\n  }\n  \n  // Secondary button - white background with blue border\n  &.ant-btn-default {\n    background-color: white;\n    border-color: #1890ff;\n    color: #1890ff;\n    \n    &:hover, &:focus {\n      border-color: #40a9ff;\n      color: #40a9ff;\n    }\n  }\n  \n  // Text button - no background or border\n  &.ant-btn-text {\n    color: #1890ff;\n    \n    &:hover, &:focus {\n      color: #40a9ff;\n      background-color: rgba(24, 144, 255, 0.1);\n    }\n  }\n  \n  // Danger button - red styling\n  &.ant-btn-dangerous {\n    background-color: #ff4d4f;\n    border-color: #ff4d4f;\n    color: white;\n    \n    &:hover, &:focus {\n      background-color: #ff7875;\n      border-color: #ff7875;\n    }\n  }\n  \n  // For disabled state\n  &.ant-btn-disabled,\n  &.ant-btn-disabled:hover,\n  &.ant-btn-disabled:focus,\n  &.ant-btn-disabled:active {\n    background-color: #f5f5f5;\n    border-color: #d9d9d9;\n    color: rgba(0, 0, 0, 0.25);\n  }\n  \n  // Shared styles for all buttons - updated for mobile-first design\n  border-radius: 4px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  \n  // Updated size variants for mobile\n  &.ant-btn-lg {\n    font-size: 16px;\n    height: 44px;\n    padding: 8px 16px;\n    border-radius: 6px;\n  }\n  \n  &.ant-btn-sm {\n    font-size: 12px;\n    height: 28px;\n    padding: 4px 12px;\n  }\n  \n  // Default size adjusted for mobile\n  &.ant-btn {\n    font-size: 14px;\n    height: 36px;\n    padding: 6px 16px;\n  }\n  \n  // Full-width button for mobile interfaces\n  &.mobile-full-width {\n    width: 100%;\n    border-radius: 4px;\n  }\n  \n  // Bottom fixed button often used in mobile apps\n  &.bottom-fixed {\n    position: fixed;\n    bottom: 0;\n    left: 0;\n    width: 100%;\n    border-radius: 0;\n    z-index: 100;\n    height: 48px;\n  }\n`;\n\n// Extend the Ant Design ButtonProps but omit the variant property to avoid conflicts\nexport interface ButtonProps extends Omit<AntButtonProps, 'variant'> {\n  label?: React.ReactNode;\n  buttonVariant?: 'primary' | 'secondary' | 'text' | 'danger';\n  fullWidthMobile?: boolean;\n  bottomFixed?: boolean;\n}\n\nconst Button: React.FC<ButtonProps> = ({ \n  label, \n  children, \n  buttonVariant = 'default',\n  type,\n  danger,\n  fullWidthMobile = false,\n  bottomFixed = false,\n  className = '',\n  ...props \n}) => {\n  // Map buttonVariant to ant design type\n  let buttonType = type;\n  let buttonDanger = danger;\n  \n  if (!buttonType) {\n    switch(buttonVariant) {\n      case 'primary':\n        buttonType = 'primary';\n        break;\n      case 'secondary':\n        buttonType = 'default';\n        break;\n      case 'text':\n        buttonType = 'text';\n        break;\n      case 'danger':\n        buttonType = 'primary';\n        buttonDanger = true;\n        break;\n      default:\n        buttonType = 'default';\n    }\n  }\n\n  // Build className string with conditional mobile classes\n  const combinedClassName = [\n    className,\n    fullWidthMobile ? 'mobile-full-width' : '',\n    bottomFixed ? 'bottom-fixed' : ''\n  ].filter(Boolean).join(' ');\n\n  return (\n    <StyledButton \n      type={buttonType} \n      danger={buttonDanger}\n      className={combinedClassName}\n      {...props}\n    >\n      {label || children}\n    </StyledButton>\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport { Input as AntInput } from 'antd';\nimport { InputProps as AntInputProps } from 'antd/lib/input';\nimport styled from 'styled-components';\n\nexport interface InputProps extends AntInputProps {\n  label?: string;\n  error?: string;\n  helperText?: string;\n  fullWidthMobile?: boolean;\n}\n\n// Styled container for the input component\nconst InputContainer = styled.div<{ fullWidthMobile?: boolean }>`\n  margin-bottom: 16px;\n  width: ${props => props.fullWidthMobile ? '100%' : 'auto'};\n`;\n\nconst LabelContainer = styled.div`\n  margin-bottom: 8px;\n  font-size: 14px;\n  font-weight: 500;\n  color: #333;\n`;\n\nconst StyledInput = styled(AntInput)`\n  // Default styling\n  border-radius: 4px;\n  \n  // Size adjustments for mobile\n  &.ant-input-lg {\n    font-size: 16px;\n    padding: 10px 12px;\n    height: 44px;\n  }\n  \n  &.ant-input {\n    font-size: 14px;\n    padding: 8px 12px;\n    height: 36px;\n  }\n  \n  &.ant-input-sm {\n    font-size: 12px;\n    padding: 4px 8px;\n    height: 28px;\n  }\n  \n  // Focus state\n  &:focus, &:hover {\n    border-color: #1890ff;\n  }\n  \n  // Error state\n  &.ant-input-status-error {\n    border-color: #ff4d4f;\n  }\n`;\n\nconst ErrorText = styled.div`\n  color: #ff4d4f;\n  font-size: 12px;\n  margin-top: 4px;\n`;\n\nconst HelperText = styled.div`\n  color: #999;\n  font-size: 12px;\n  margin-top: 4px;\n`;\n\nconst Input: React.FC<InputProps> = ({ \n  label, \n  error, \n  helperText,\n  fullWidthMobile = false,\n  ...props \n}) => {\n  return (\n    <InputContainer fullWidthMobile={fullWidthMobile}>\n      {label && (\n        <LabelContainer>\n          <label>{label}{props.required && <span style={{ color: '#ff4d4f' }}> *</span>}</label>\n        </LabelContainer>\n      )}\n      <StyledInput {...props} status={error ? 'error' : ''} />\n      {error && <ErrorText>{error}</ErrorText>}\n      {helperText && !error && <HelperText>{helperText}</HelperText>}\n    </InputContainer>\n  );\n};\n\nexport default Input;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Form, Select } from 'antd';\nimport Input from '../atoms/Input';\nimport Button from '../atoms/Button';\nimport { useTranslation } from 'react-i18next';\n\nconst FormContainer = styled.div`\n  background: #fff;\n  min-height: 100vh;\n  padding: 16px;\n`;\n\nconst Title = styled.h1`\n  font-size: 20px;\n  font-weight: 500;\n  color: #333;\n  margin: 0 0 24px 0;\n`;\n\nconst ButtonGroup = styled.div`\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  padding: 16px;\n  background: #fff;\n  box-shadow: 0 -2px 8px rgba(0, 0, 0, 0.05);\n  display: flex;\n  gap: 12px;\n`;\n\nconst { Option } = Select;\n\nexport interface ContainerFormData {\n  containerNumber: string;\n  type: string;\n  weight: string;\n  destination: string;\n  loadingPort: string;\n  dischargePort: string;\n  vessel: string;\n  voyage: string;\n  eta: string;\n}\n\nexport interface ContainerFormProps {\n  initialValues?: ContainerFormData;\n  onSubmit: (values: ContainerFormData) => void;\n  onCancel: () => void;\n  isEdit?: boolean;\n}\n\nconst ContainerForm: React.FC<ContainerFormProps> = ({\n  initialValues,\n  onSubmit,\n  onCancel,\n  isEdit = false,\n}) => {\n  const [form] = Form.useForm<ContainerFormData>();\n  const { t } = useTranslation();\n\n  const handleSubmit = () => {\n    form.validateFields().then(values => {\n      onSubmit(values);\n    });\n  };\n\n  return (\n    <FormContainer>\n      <Title>\n        {isEdit ? t('container.form.editContainer') : t('container.form.addContainer')}\n      </Title>\n      \n      <Form\n        form={form}\n        layout=\"vertical\"\n        initialValues={initialValues}\n        style={{ marginBottom: '80px' }}\n      >\n        <Form.Item\n          name=\"containerNumber\"\n          label={t('container.details.containerNumber')}\n          rules={[{ required: true, message: t('container.validation.pleaseEnterContainerNumber') }]}\n        >\n          <Input placeholder={t('container.form.enterContainerNumber')} fullWidthMobile />\n        </Form.Item>\n\n        <Form.Item\n          name=\"type\"\n          label={t('container.details.containerType')}\n          rules={[{ required: true, message: t('container.validation.pleaseSelectContainerType') }]}\n        >\n          <Select placeholder={t('container.form.selectContainerType')}>\n            <Option value=\"20GP\">20GP</Option>\n            <Option value=\"40GP\">40GP</Option>\n            <Option value=\"40HC\">40HC</Option>\n          </Select>\n        </Form.Item>\n\n        <Form.Item\n          name=\"weight\"\n          label={t('container.details.weight')}\n          rules={[{ required: true, message: t('container.validation.pleaseEnterWeight') }]}\n        >\n          <Input \n            placeholder={t('container.form.enterWeight')} \n            suffix={t('container.form.ton')} \n            fullWidthMobile \n          />\n        </Form.Item>\n\n        <Form.Item\n          name=\"destination\"\n          label={t('container.details.destination')}\n          rules={[{ required: true, message: t('container.validation.pleaseEnterDestination') }]}\n        >\n          <Input placeholder={t('container.form.enterDestination')} fullWidthMobile />\n        </Form.Item>\n\n        <Form.Item\n          name=\"loadingPort\"\n          label={t('container.details.loadingPort')}\n          rules={[{ required: true, message: t('container.validation.pleaseEnterLoadingPort') }]}\n        >\n          <Input placeholder={t('container.form.enterLoadingPort')} fullWidthMobile />\n        </Form.Item>\n\n        <Form.Item\n          name=\"dischargePort\"\n          label={t('container.details.dischargePort')}\n          rules={[{ required: true, message: t('container.validation.pleaseEnterDischargePort') }]}\n        >\n          <Input placeholder={t('container.form.enterDischargePort')} fullWidthMobile />\n        </Form.Item>\n\n        <Form.Item\n          name=\"vessel\"\n          label={t('container.details.vessel')}\n          rules={[{ required: true, message: t('container.validation.pleaseEnterVessel') }]}\n        >\n          <Input placeholder={t('container.form.enterVessel')} fullWidthMobile />\n        </Form.Item>\n\n        <Form.Item\n          name=\"voyage\"\n          label={t('container.details.voyage')}\n          rules={[{ required: true, message: t('container.validation.pleaseEnterVoyage') }]}\n        >\n          <Input placeholder={t('container.form.enterVoyage')} fullWidthMobile />\n        </Form.Item>\n\n        <Form.Item\n          name=\"eta\"\n          label={t('container.details.eta')}\n          rules={[{ required: true, message: t('container.validation.pleaseEnterETA') }]}\n        >\n          <Input placeholder=\"YYYY-MM-DD HH:mm\" fullWidthMobile />\n        </Form.Item>\n      </Form>\n\n      <ButtonGroup>\n        <Button\n          buttonVariant=\"secondary\"\n          fullWidthMobile\n          onClick={onCancel}\n        >\n          {t('common.cancel')}\n        </Button>\n        <Button\n          buttonVariant=\"primary\"\n          fullWidthMobile\n          onClick={handleSubmit}\n        >\n          {t('common.confirm')}\n        </Button>\n      </ButtonGroup>\n    </FormContainer>\n  );\n};\n\nexport default ContainerForm; ","import React from 'react';\nimport { Button } from 'antd';\nimport styled from 'styled-components';\nimport { useTranslation } from 'react-i18next';\n\nconst SwitcherContainer = styled.div`\n  position: fixed;\n  top: 16px;\n  right: 16px;\n  z-index: 1000;\n  display: flex;\n  gap: 8px;\n`;\n\nconst LanguageButton = styled(Button)<{ $isActive: boolean }>`\n  min-width: 40px;\n  opacity: ${props => props.$isActive ? 1 : 0.6};\n`;\n\nconst LanguageSwitcher: React.FC = () => {\n  const { i18n } = useTranslation();\n\n  const changeLanguage = (lng: string) => {\n    i18n.changeLanguage(lng);\n  };\n\n  return (\n    <SwitcherContainer>\n      <LanguageButton\n        type={i18n.language === 'en' ? 'primary' : 'default'}\n        $isActive={i18n.language === 'en'}\n        onClick={() => changeLanguage('en')}\n      >\n        EN\n      </LanguageButton>\n      <LanguageButton\n        type={i18n.language === 'zh' ? 'primary' : 'default'}\n        $isActive={i18n.language === 'zh'}\n        onClick={() => changeLanguage('zh')}\n      >\n        中\n      </LanguageButton>\n    </SwitcherContainer>\n  );\n};\n\nexport default LanguageSwitcher; "],"names":[],"sourceRoot":""}